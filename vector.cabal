Name:           vector
Version:        0.2
License:        BSD3
License-File:   LICENSE
Author:         Roman Leshchinskiy
Maintainer:     Roman Leshchinskiy <rl@cse.unsw.edu.au>
Copyright:      (c) Roman Leshchinskiy 2008
Homepage:       http://darcs.haskell.org/vector
Category:       Data Structures
Synopsis:       Efficient Arrays
Description:
        .
        An efficient implementation of Int-indexed arrays with a powerful
        loop fusion framework.
        .
        This code is highly experimental and for the most part untested. Use
        at your own risk!

Cabal-Version:  >= 1.2
Build-Type:     Simple

Library
  Extensions: CPP
  Exposed-Modules:
        Data.Vector.Fusion.Stream.Size
        Data.Vector.Fusion.Stream.Monadic
        Data.Vector.Fusion.Stream

        Data.Vector.MVector
        Data.Vector.MVector.New
        Data.Vector.IVector

        Data.Vector.Unboxed.Unbox
        Data.Vector.Unboxed.Mutable
        Data.Vector.Unboxed

        Data.Vector.Mutable
        Data.Vector
  Include-Dirs:
        include

  Install-Includes:
        phases.h

  Build-Depends: base, array, ghc-prim,
                 ghc >= 6.9

-- -finline-if-enough-args is ESSENTIAL. If we don't have this the partial application
-- of e.g. Stream.Monadic.++ to the monad dictionary at the use site in Stream.++ causes
-- it to be fruitlessly inlined. This in turn leads to a huge RHS for Stream.++, so it
-- doesn't get inlined at the final call site and fusion fails to occur.
  Ghc-Options: -O2 -finline-if-enough-args
